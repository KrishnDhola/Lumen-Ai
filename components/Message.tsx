import React, { useState, useEffect } from 'react';
import { Message as MessageType } from '../types.ts';
import { UserIcon } from './icons/UserIcon.tsx';
import { BotIcon } from './icons/BotIcon.tsx';
import { CodeBlock } from './CodeBlock.tsx';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { ProgressBar } from './ProgressBar.tsx';
import { DownloadIcon } from './icons/DownloadIcon.tsx';
import { FileIcon } from './icons/FileIcon.tsx';
import { SeoPack } from './SeoPack.tsx';

interface MessageProps {
  message: MessageType;
}

const getAspectRatioStyle = (ratio: string | undefined): React.CSSProperties => {
    if (!ratio) return { aspectRatio: '1 / 1' };
    return { aspectRatio: ratio.replace(':', ' / ') };
};

const AssistantMessageContent: React.FC<{ message: MessageType }> = ({ message }) => {
  const [isImageContentLoaded, setIsImageContentLoaded] = useState(false);
  const [progress, setProgress] = useState(10);

  useEffect(() => {
    if (message.content.startsWith('data:image/')) {
        // For base64 images, loading is almost instant.
        handleImageLoad();
        return;
    }
    if (message.type === 'image' && !isImageContentLoaded) {
      const timer = setInterval(() => {
        setProgress(oldProgress => {
          if (oldProgress >= 95) {
            clearInterval(timer);
            return 95;
          }
          const diff = Math.random() * 15;
          return Math.min(oldProgress + diff, 95);
        });
      }, 400);
      return () => clearInterval(timer);
    }
  }, [isImageContentLoaded, message.type, message.content]);

  const handleImageLoad = () => {
    setProgress(100);
    setTimeout(() => {
      setIsImageContentLoaded(true);
    }, 300);
  };

  const isSeoPack = message.content.startsWith('Title:') && message.content.includes('Thumbnail Prompt (for AI):');

  if (isSeoPack) {
    return <SeoPack content={message.content} />;
  }

  if (message.type === 'image') {
    return (
      <div 
        className="p-2 rounded-[0.625rem] border-2 bg-base-100 border-neutral max-w-sm w-full"
        style={getAspectRatioStyle(message.aspectRatio)}
      >
        <div className="relative group w-full h-full">
          {!isImageContentLoaded && (
            <div className="absolute inset-0 p-4 flex flex-col items-center justify-center gap-4 bg-base-300/80 rounded-md">
              <div className="w-4/5">
                <p className="font-bold text-base-content/80 text-center mb-2">Generating Image...</p>
                <ProgressBar progress={progress} />
              </div>
            </div>
          )}
          <img 
            src={message.content} 
            alt="Generated by AI" 
            onLoad={handleImageLoad}
            onError={handleImageLoad} // Also hide progress bar on error
            className={`rounded-md w-full h-full object-cover transition-opacity duration-500 ${isImageContentLoaded ? 'opacity-100' : 'opacity-0'}`}
          />
          {isImageContentLoaded && (
            <a
              href={message.content}
              target="_blank"
              rel="noopener noreferrer"
              className="absolute bottom-3 right-3 flex items-center gap-2 bg-black/50 text-white/90 backdrop-blur-sm px-3 py-2 rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-200"
              aria-label="Save image"
            >
              <DownloadIcon className="w-5 h-5" />
              <span className="text-sm font-bold">Save</span>
            </a>
          )}
        </div>
      </div>
    );
  }

  // Text message rendering with source detection
  const parts = message.content.split(/\n\s*Sources:/i);
  const mainContent = parts[0];
  const sourcesRaw = parts.length > 1 ? parts[1] : null;
  const sources = sourcesRaw
    ? sourcesRaw.trim().split('\n').map(s => s.trim().replace(/^-/, '').trim()).filter(s => s.startsWith('http'))
    : [];

  return (
    <div className="p-4 rounded-[0.625rem] border-2 bg-base-100 text-base-content border-neutral font-medium [&>*:last-child]:mb-0 max-w-2xl w-full">
      <ReactMarkdown
          remarkPlugins={[remarkGfm]}
          components={{
              h1: ({node, ...props}) => <h1 className="text-2xl font-serif font-bold mt-0 mb-4" {...props} />,
              h2: ({node, ...props}) => <h2 className="text-xl font-serif font-bold mt-0 mb-3" {...props} />,
              h3: ({node, ...props}) => <h3 className="text-lg font-serif font-bold mt-0 mb-2" {...props} />,
              p: ({node, ...props}) => <p className="mt-0 mb-2" {...props} />,
              a: ({node, ...props}) => <a className="text-primary hover:underline" target="_blank" rel="noopener noreferrer" {...props} />,
              ul: ({node, ...props}) => <ul className="list-disc pl-5 mt-0 mb-2 space-y-1" {...props} />,
              ol: ({node, ...props}) => <ol className="list-decimal pl-5 mt-0 mb-2 space-y-1" {...props} />,
              li: ({node, ...props}) => <li className="font-medium" {...props} />,
              blockquote: ({node, ...props}) => <blockquote className="border-l-4 border-neutral pl-4 italic text-base-content/80 mt-0 mb-2" {...props} />,
              hr: ({node, ...props}) => <hr className="border-neutral my-4" {...props} />,
              code(props: any) {
                const { inline, className, children, ...rest } = props;
                const match = /language-(\w+)/.exec(className || '');
                return !inline && match ? (
                  <CodeBlock language={match[1]}>
                    {String(children).replace(/\n$/, '')}
                  </CodeBlock>
                ) : (
                  <code className="bg-base-300/80 text-base-content/80 px-1.5 py-0.5 rounded-[0.25rem] font-mono text-sm font-normal" {...rest}>
                    {children}
                  </code>
                );
              }
          }}
      >
          {mainContent}
      </ReactMarkdown>

      {sources.length > 0 && (
        <div className="mt-4 pt-4 border-t-2 border-neutral/50">
          <h4 className="text-sm font-bold font-serif text-base-content/80 mb-2">Sources</h4>
          <ul className="list-none p-0 m-0 space-y-1">
            {sources.map((source, index) => (
              <li key={index} className="text-sm truncate">
                <a 
                  href={source} 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  className="text-primary/80 hover:text-primary transition-colors duration-200"
                  title={source}
                >
                  {source}
                </a>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};


export const Message: React.FC<MessageProps> = ({ message }) => {
  const isUser = message.role === 'user';
  
  if (isUser) {
    return (
      <div className="flex items-start gap-3 justify-end">
        <div className="p-4 rounded-[0.625rem] border-2 max-w-2xl bg-primary text-primary-content border-primary-focus">
          {message.attachment && (
            <div className="mb-3 p-2 bg-primary-focus/30 rounded-lg flex items-center gap-3">
              {message.attachment.type.startsWith('image/') ? (
                <img src={message.attachment.data} alt={message.attachment.name} className="w-16 h-16 rounded-md object-cover flex-shrink-0" />
              ) : (
                <div className="w-16 h-16 rounded-md bg-primary-focus/50 flex items-center justify-center flex-shrink-0">
                  <FileIcon className="w-8 h-8 text-primary-content" />
                </div>
              )}
              <div className="flex-1 min-w-0">
                <p className="font-bold truncate">{message.attachment.name}</p>
              </div>
            </div>
          )}
          {message.content && <p className="font-medium whitespace-pre-wrap">{message.content}</p>}
        </div>
        <div className="w-10 h-10 rounded-full bg-accent flex items-center justify-center flex-shrink-0 border-2 border-neutral">
          <UserIcon className="w-6 h-6 text-accent-content" />
        </div>
      </div>
    );
  }
  
  return (
    <div className="group flex items-start gap-3 justify-start">
      <div className="w-10 h-10 rounded-full bg-base-300 flex items-center justify-center flex-shrink-0 border-2 border-neutral">
        <BotIcon className="w-6 h-6 text-primary" />
      </div>
      <AssistantMessageContent message={message} />
    </div>
  );
};